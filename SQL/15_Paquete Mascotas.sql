--Paquete que contiene todos los procedimientos y funciones relacionados a las mascotas.
create or replace PACKAGE mascotas_paq AS  

--Función que recibe todos los parámetros necesarios para registrar una mascota y hace una inserción en la tabla mascotas.  
   FUNCTION insertar_Mascota(
    pUSUARIO USUARIOS.CORREOUSUARIO%TYPE,
    pNOMBRE MASCOTAS.NOMBRE_MASCOTA%TYPE, 
    pRAZA MASCOTAS.RAZA_MASCOTA%TYPE, 
    pTIPO MASCOTAS.TIPO_MASCOTA%TYPE, 
    pENTRENAMIENTO MASCOTAS.ENTRENAMIENTO_MASCOTA%TYPE, 
    pDESCRIPCION MASCOTAS.DESCRIPCION_MASCOTA%TYPE,
    pTAMANO MASCOTAS.TAMANO_MASCOTA%TYPE, 
    pCOLOR MASCOTAS.COLOR_MASCOTA%TYPE, 
    pENERGIA MASCOTAS.ENERGIA_MASCOTA%TYPE, 
    pESPACIO MASCOTAS.ESPACIO_MASCOTA%TYPE, 
    pPELAJE MASCOTAS.PELAJE_MASCOTA%TYPE, 
    pFOTO_ANTES MASCOTAS.FOTO_ANTES%TYPE, 
    pFOTO_DESPUES MASCOTAS.FOTO_DESPUES%TYPE, 
    pESTADO_MASCOTA MASCOTAS.ESTADO_MASCOTA%TYPE,
    pSEVERIDAD ESTADO_DE_SALUD.SEVERIDAD%TYPE, 
    pVETERINARIO ESTADO_DE_SALUD.NOMBRE_VETERINARIO%TYPE, 
    pENFERMEDAD ESTADO_DE_SALUD.NOMBRE_ENFERMEDAD%TYPE, 
    pTRATAMIENTO ESTADO_DE_SALUD.NOMBRE_TRATAMIENTO%TYPE, 
    pMEDICAMENTOS ESTADO_DE_SALUD.NOMBRE_MEDICAMENTOS%TYPE,
    pLUGAR MASCOTAS.LUGAR_DE_ENCUENTRO%TYPE)
RETURN VARCHAR2;

--Función que verifica la existencia de una mascota en la tabla mascotas a partir de su identificador
   FUNCTION verificar_Mascota (
    pID IN MASCOTAS.ID_MASCOTA%TYPE)
   RETURN VARCHAR2;
   -------------------------
--Función que recibe algunos datos de una mascota y hace una actualización en la tabla mascotas.
   FUNCTION actualizar_datos(
    pID MASCOTAS.ID_MASCOTA%TYPE,
    pNOMBRE MASCOTAS.NOMBRE_MASCOTA%TYPE, 
    pRAZA MASCOTAS.RAZA_MASCOTA%TYPE, 
    pTIPO MASCOTAS.TIPO_MASCOTA%TYPE, 
    pENTRENAMIENTO MASCOTAS.ENTRENAMIENTO_MASCOTA%TYPE, 
    pDESCRIPCION MASCOTAS.DESCRIPCION_MASCOTA%TYPE,
    pTAMANO MASCOTAS.TAMANO_MASCOTA%TYPE, 
    pCOLOR MASCOTAS.COLOR_MASCOTA%TYPE, 
    pENERGIA MASCOTAS.ENERGIA_MASCOTA%TYPE, 
    pESPACIO MASCOTAS.ESPACIO_MASCOTA%TYPE, 
    pPELAJE MASCOTAS.PELAJE_MASCOTA%TYPE, 
    pFOTO_ANTES MASCOTAS.FOTO_ANTES%TYPE, 
    pFOTO_DESPUES MASCOTAS.FOTO_DESPUES%TYPE, 
    pESTADO_MASCOTA MASCOTAS.ESTADO_MASCOTA%TYPE,
    pLUGAR MASCOTAS.LUGAR_DE_ENCUENTRO%TYPE,
    pUSUARIO USUARIOS.CORREOUSUARIO%TYPE)
  RETURN VARCHAR2;
  --Función que recibe algunos datos de una mascota y hace una actualización en la tabla salud.
  FUNCTION actualizar_salud(
    pID ESTADO_DE_SALUD.ID_SALUD%TYPE,
    pSEVERIDAD ESTADO_DE_SALUD.SEVERIDAD%TYPE, 
    pVETERINARIO ESTADO_DE_SALUD.NOMBRE_VETERINARIO%TYPE, 
    pENFERMEDAD ESTADO_DE_SALUD.NOMBRE_ENFERMEDAD%TYPE, 
    pTRATAMIENTO ESTADO_DE_SALUD.NOMBRE_TRATAMIENTO%TYPE, 
    pMEDICAMENTOS ESTADO_DE_SALUD.NOMBRE_MEDICAMENTOS%TYPE)
  RETURN VARCHAR2;
------------------
 --Función que recibe todos los datos de una mascota y hace una actualización en la tabla mascotas.
  PROCEDURE actualizar_mascota(
    pID MASCOTAS.ID_MASCOTA%TYPE,
    pNOMBRE MASCOTAS.NOMBRE_MASCOTA%TYPE, 
    pRAZA MASCOTAS.RAZA_MASCOTA%TYPE, 
    pTIPO MASCOTAS.TIPO_MASCOTA%TYPE, 
    pENTRENAMIENTO MASCOTAS.ENTRENAMIENTO_MASCOTA%TYPE, 
    pDESCRIPCION MASCOTAS.DESCRIPCION_MASCOTA%TYPE,
    pTAMANO MASCOTAS.TAMANO_MASCOTA%TYPE, 
    pCOLOR MASCOTAS.COLOR_MASCOTA%TYPE, 
    pENERGIA MASCOTAS.ENERGIA_MASCOTA%TYPE, 
    pESPACIO MASCOTAS.ESPACIO_MASCOTA%TYPE, 
    pPELAJE MASCOTAS.PELAJE_MASCOTA%TYPE, 
    pFOTO_ANTES MASCOTAS.FOTO_ANTES%TYPE, 
    pFOTO_DESPUES MASCOTAS.FOTO_DESPUES%TYPE, 
    pESTADO_MASCOTA MASCOTAS.ESTADO_MASCOTA%TYPE,
    pSEVERIDAD ESTADO_DE_SALUD.SEVERIDAD%TYPE, 
    pVETERINARIO ESTADO_DE_SALUD.NOMBRE_VETERINARIO%TYPE, 
    pENFERMEDAD ESTADO_DE_SALUD.NOMBRE_ENFERMEDAD%TYPE, 
    pTRATAMIENTO ESTADO_DE_SALUD.NOMBRE_TRATAMIENTO%TYPE, 
    pMEDICAMENTOS ESTADO_DE_SALUD.NOMBRE_MEDICAMENTOS%TYPE,
    pLUGAR MASCOTAS.LUGAR_DE_ENCUENTRO%TYPE,
    pUSUARIO USUARIOS.CORREOUSUARIO%TYPE
    );
------------------
--Procedimiento que mediante un cursor retorna los tipos de animal
PROCEDURE get_TipoAnimal(cursorMascotas OUT SYS_REFCURSOR);
------------------
--Procedimiento que mediante un cursor retorna las razas de un tipo de animal
PROCEDURE get_RazaAnimal(cursorMascotas OUT SYS_REFCURSOR, pTipoAnimal VARCHAR2);
-------------------
--Procedimiento que mediante un cursor retorna todos los datos de una mascota
PROCEDURE get_InfoMascota(cursorMascotas OUT SYS_REFCURSOR, pSaludIDMascota ESTADO_DE_SALUD.ID_SALUD%TYPE);
-------------------
END mascotas_paq;
-----------------------------------------------------------
/
create or replace PACKAGE BODY MASCOTAS_PAQ AS --Second part
FUNCTION insertar_Mascota(
    pUSUARIO USUARIOS.CORREOUSUARIO%TYPE,
    pNOMBRE MASCOTAS.NOMBRE_MASCOTA%TYPE, 
    pRAZA MASCOTAS.RAZA_MASCOTA%TYPE, 
    pTIPO MASCOTAS.TIPO_MASCOTA%TYPE, 
    pENTRENAMIENTO MASCOTAS.ENTRENAMIENTO_MASCOTA%TYPE, 
    pDESCRIPCION MASCOTAS.DESCRIPCION_MASCOTA%TYPE,
    pTAMANO MASCOTAS.TAMANO_MASCOTA%TYPE, 
    pCOLOR MASCOTAS.COLOR_MASCOTA%TYPE, 
    pENERGIA MASCOTAS.ENERGIA_MASCOTA%TYPE, 
    pESPACIO MASCOTAS.ESPACIO_MASCOTA%TYPE, 
    pPELAJE MASCOTAS.PELAJE_MASCOTA%TYPE, 
    pFOTO_ANTES MASCOTAS.FOTO_ANTES%TYPE, 
    pFOTO_DESPUES MASCOTAS.FOTO_DESPUES%TYPE, 
    pESTADO_MASCOTA MASCOTAS.ESTADO_MASCOTA%TYPE,
    pSEVERIDAD ESTADO_DE_SALUD.SEVERIDAD%TYPE, 
    pVETERINARIO ESTADO_DE_SALUD.NOMBRE_VETERINARIO%TYPE, 
    pENFERMEDAD ESTADO_DE_SALUD.NOMBRE_ENFERMEDAD%TYPE, 
    pTRATAMIENTO ESTADO_DE_SALUD.NOMBRE_TRATAMIENTO%TYPE, 
    pMEDICAMENTOS ESTADO_DE_SALUD.NOMBRE_MEDICAMENTOS%TYPE,
    pLUGAR MASCOTAS.LUGAR_DE_ENCUENTRO%TYPE)
RETURN VARCHAR2
IS    
   BEGIN 
        INSERT ALL
        INTO ESTADO_DE_SALUD("ID_SALUD","NOMBRE_VETERINARIO","NOMBRE_ENFERMEDAD","NOMBRE_TRATAMIENTO","NOMBRE_MEDICAMENTOS","SEVERIDAD")
        VALUES(S_IDMASCOTA.NEXTVAL,pVETERINARIO,pENFERMEDAD,pTRATAMIENTO,pMEDICAMENTOS,pSEVERIDAD)
        INTO MASCOTAS("ID_MASCOTA","NOMBRE_MASCOTA","TIPO_MASCOTA","RAZA_MASCOTA","ENTRENAMIENTO_MASCOTA","DESCRIPCION_MASCOTA","TAMANO_MASCOTA","COLOR_MASCOTA","ENERGIA_MASCOTA","ESPACIO_MASCOTA","PELAJE_MASCOTA","FOTO_ANTES","FOTO_DESPUES","ESTADO_MASCOTA","ID_SALUD","LUGAR_DE_ENCUENTRO","USUARIO_ASOCIADO") 
        VALUES(S_IDMASCOTA.CURRVAL,pNOMBRE,pTIPO,pRAZA,pENTRENAMIENTO,pDESCRIPCION,pTAMANO,pCOLOR,pENERGIA,pESPACIO,pPELAJE,pFOTO_ANTES,pFOTO_DESPUES,'EN ADOPCION',S_IDMASCOTA.CURRVAL,pLUGAR,pUSUARIO) 
        SELECT * FROM dual;
        COMMIT;   
        RETURN 'Insertado';
   EXCEPTION
     WHEN DUP_VAL_ON_INDEX
     THEN
     RETURN 'Error';     
   END; 
   ---------------------------------
   FUNCTION actualizar_datos(
    pID MASCOTAS.ID_MASCOTA%TYPE,
    pNOMBRE MASCOTAS.NOMBRE_MASCOTA%TYPE, 
    pRAZA MASCOTAS.RAZA_MASCOTA%TYPE, 
    pTIPO MASCOTAS.TIPO_MASCOTA%TYPE, 
    pENTRENAMIENTO MASCOTAS.ENTRENAMIENTO_MASCOTA%TYPE, 
    pDESCRIPCION MASCOTAS.DESCRIPCION_MASCOTA%TYPE,
    pTAMANO MASCOTAS.TAMANO_MASCOTA%TYPE, 
    pCOLOR MASCOTAS.COLOR_MASCOTA%TYPE, 
    pENERGIA MASCOTAS.ENERGIA_MASCOTA%TYPE, 
    pESPACIO MASCOTAS.ESPACIO_MASCOTA%TYPE, 
    pPELAJE MASCOTAS.PELAJE_MASCOTA%TYPE, 
    pFOTO_ANTES MASCOTAS.FOTO_ANTES%TYPE, 
    pFOTO_DESPUES MASCOTAS.FOTO_DESPUES%TYPE, 
    pESTADO_MASCOTA MASCOTAS.ESTADO_MASCOTA%TYPE,
    pLUGAR MASCOTAS.LUGAR_DE_ENCUENTRO%TYPE,
    pUSUARIO USUARIOS.CORREOUSUARIO%TYPE)
  RETURN VARCHAR2
  IS
    BEGIN
    UPDATE MASCOTAS
      SET NOMBRE_MASCOTA = pNOMBRE,
          RAZA_MASCOTA = pRAZA,
          TIPO_MASCOTA = pTIPO,
          ENTRENAMIENTO_MASCOTA = pENTRENAMIENTO,
          DESCRIPCION_MASCOTA = pDESCRIPCION,
          TAMANO_MASCOTA = pTAMANO,
          COLOR_MASCOTA = pCOLOR,
          ENERGIA_MASCOTA = pENERGIA,
          ESPACIO_MASCOTA = pESPACIO,
          PELAJE_MASCOTA = pPELAJE,
          FOTO_ANTES = pFOTO_ANTES,
          FOTO_DESPUES = pFOTO_DESPUES,
          ESTADO_MASCOTA = pESTADO_MASCOTA,
          LUGAR_DE_ENCUENTRO = pLUGAR,
          USUARIO_ASOCIADO = pUSUARIO
        WHERE ID_MASCOTA = pID;
        COMMIT;   
        RETURN 'Actualizado';
   EXCEPTION
     WHEN DUP_VAL_ON_INDEX
     THEN
     RETURN 'Error';     
   END; 
-------------------------
  FUNCTION actualizar_salud(
    pID ESTADO_DE_SALUD.ID_SALUD%TYPE,
    pSEVERIDAD ESTADO_DE_SALUD.SEVERIDAD%TYPE, 
    pVETERINARIO ESTADO_DE_SALUD.NOMBRE_VETERINARIO%TYPE, 
    pENFERMEDAD ESTADO_DE_SALUD.NOMBRE_ENFERMEDAD%TYPE, 
    pTRATAMIENTO ESTADO_DE_SALUD.NOMBRE_TRATAMIENTO%TYPE, 
    pMEDICAMENTOS ESTADO_DE_SALUD.NOMBRE_MEDICAMENTOS%TYPE)
  RETURN VARCHAR2
IS
    BEGIN
    UPDATE ESTADO_DE_SALUD
      SET SEVERIDAD = pSEVERIDAD,
        NOMBRE_VETERINARIO = pVETERINARIO,
        NOMBRE_ENFERMEDAD = pENFERMEDAD,
        NOMBRE_TRATAMIENTO = pTRATAMIENTO,
        NOMBRE_MEDICAMENTOS = pMEDICAMENTOS
        WHERE ID_SALUD = pID;
        COMMIT;   
        RETURN 'Actualizado';
   EXCEPTION
     WHEN DUP_VAL_ON_INDEX
     THEN
     RETURN 'Error';     
   END;
----------------------------
PROCEDURE actualizar_mascota(
    pID MASCOTAS.ID_MASCOTA%TYPE,
    pNOMBRE MASCOTAS.NOMBRE_MASCOTA%TYPE, 
    pRAZA MASCOTAS.RAZA_MASCOTA%TYPE, 
    pTIPO MASCOTAS.TIPO_MASCOTA%TYPE, 
    pENTRENAMIENTO MASCOTAS.ENTRENAMIENTO_MASCOTA%TYPE, 
    pDESCRIPCION MASCOTAS.DESCRIPCION_MASCOTA%TYPE,
    pTAMANO MASCOTAS.TAMANO_MASCOTA%TYPE, 
    pCOLOR MASCOTAS.COLOR_MASCOTA%TYPE, 
    pENERGIA MASCOTAS.ENERGIA_MASCOTA%TYPE, 
    pESPACIO MASCOTAS.ESPACIO_MASCOTA%TYPE, 
    pPELAJE MASCOTAS.PELAJE_MASCOTA%TYPE, 
    pFOTO_ANTES MASCOTAS.FOTO_ANTES%TYPE, 
    pFOTO_DESPUES MASCOTAS.FOTO_DESPUES%TYPE, 
    pESTADO_MASCOTA MASCOTAS.ESTADO_MASCOTA%TYPE,
    pSEVERIDAD ESTADO_DE_SALUD.SEVERIDAD%TYPE, 
    pVETERINARIO ESTADO_DE_SALUD.NOMBRE_VETERINARIO%TYPE, 
    pENFERMEDAD ESTADO_DE_SALUD.NOMBRE_ENFERMEDAD%TYPE, 
    pTRATAMIENTO ESTADO_DE_SALUD.NOMBRE_TRATAMIENTO%TYPE, 
    pMEDICAMENTOS ESTADO_DE_SALUD.NOMBRE_MEDICAMENTOS%TYPE,
    pLUGAR MASCOTAS.LUGAR_DE_ENCUENTRO%TYPE,
    pUSUARIO USUARIOS.CORREOUSUARIO%TYPE
    )
    IS
    DATOS_RES varchar2(50);
    SALUD_RES varchar2(50); 
    BEGIN
      DATOS_RES := actualizar_datos(pID,pNOMBRE,pRAZA,pTIPO,pENTRENAMIENTO,pDESCRIPCION,pTAMANO,pCOLOR,pENERGIA,pESPACIO,pPELAJE,pFOTO_ANTES,pFOTO_DESPUES,pESTADO_MASCOTA,pLUGAR,pUSUARIO);
      SALUD_RES := actualizar_salud(pID,pSEVERIDAD,pVETERINARIO,pENFERMEDAD,pTRATAMIENTO,pMEDICAMENTOS);
      COMMIT;        
   END;
    

----------------------------------------------Verificar
FUNCTION verificar_Mascota (
   pID IN MASCOTAS.ID_MASCOTA%TYPE)
RETURN VARCHAR2
IS
   id MASCOTAS.ID_MASCOTA%TYPE;
BEGIN
     SELECT ID_MASCOTA INTO id
     FROM MASCOTAS                 
     WHERE ID_MASCOTA = pID; 
     RETURN 'Registrado';
EXCEPTION
     WHEN NO_DATA_FOUND
     THEN
     RETURN NULL;
END; 
---------------
PROCEDURE get_TipoAnimal(cursorMascotas OUT SYS_REFCURSOR) as
begin
  OPEN cursorMascotas 
    FOR select * from TIPO_DE_ANIMAL;
end;
---------------------------------------------
PROCEDURE get_RazaAnimal(cursorMascotas OUT SYS_REFCURSOR, pTipoAnimal VARCHAR2) as
begin
  OPEN cursorMascotas 
    FOR 
    SELECT r.NOMBRE_RAZA
  FROM Raza r
  JOIN ANIMAL_TIENE_RAZA atr
    ON atr.NOMBRE_RAZA = r.NOMBRE_RAZA
  JOIN TIPO_DE_ANIMAL ta
    ON ta.NOMBRE_TIPO = atr.NOMBRE_TIPO
 WHERE ta.NOMBRE_TIPO = pTipoAnimal;
end;
--------------------------------------------
PROCEDURE get_InfoMascota(cursorMascotas OUT SYS_REFCURSOR, pSaludIDMascota IN ESTADO_DE_SALUD.ID_SALUD%TYPE) AS
BEGIN
  OPEN cursorMascotas
    FOR
    SELECT * FROM ESTADO_DE_SALUD
    WHERE ESTADO_DE_SALUD.ID_SALUD = pSaludIDMascota;
END;
-------------------END PAQUETE
END MASCOTAS_PAQ;